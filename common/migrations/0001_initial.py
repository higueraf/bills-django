# Generated by Django 4.0.6 on 2022-07-18 20:03

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated')),
                ('name', models.CharField(error_messages={'blank': "The name field can't be blank.", 'invalid': 'The name field is invalid.', 'max_length': 'The name field must be at most 255 characters.', 'null': "The name field can't be null.", 'unique': 'Country with this name already exists.'}, max_length=255, unique=True, verbose_name='Name')),
                ('name_sp', models.CharField(blank=True, error_messages={'blank': "The name_sp field can't be blank.", 'invalid': 'The name_sp field is invalid.', 'max_length': 'The name_sp field must be at most 255 characters.', 'null': "The name_sp field can't be null."}, max_length=255, null=True, verbose_name='Name Sp')),
                ('nam', models.CharField(blank=True, error_messages={'blank': "The nam field can't be blank.", 'invalid': 'The nam field is invalid.', 'max_length': 'The nam field must be at most 255 characters.', 'null': "The nam field can't be null."}, max_length=255, null=True, verbose_name='Nam')),
                ('iso2', models.CharField(blank=True, error_messages={'blank': "The iso2 field can't be blank.", 'invalid': 'The iso2 field is invalid.', 'max_length': 'The iso2 field must be at most 255 characters.', 'null': "The iso2 field can't be null."}, max_length=10, null=True, verbose_name='iso2')),
                ('iso3', models.CharField(blank=True, error_messages={'blank': "The iso3 field can't be blank.", 'invalid': 'The iso3 field is invalid.', 'max_length': 'The iso3 field must be at most 255 characters.', 'null': "The iso3 field can't be null."}, max_length=10, null=True, verbose_name='iso3')),
                ('phone_code', models.CharField(blank=True, error_messages={'blank': "The phone_code field can't be blank.", 'invalid': 'The phone_code field is invalid.', 'max_length': 'The phone_code field must be at most 255 characters.', 'null': "The phone_code field can't be null."}, max_length=10, null=True, verbose_name='Phone code')),
            ],
            options={
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Municipality',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated')),
                ('name', models.CharField(error_messages={'blank': "The nombre field can't be blank.", 'invalid': 'The nombre field is invalid.', 'max_length': 'The nombre field must be at most 255 characters.', 'null': "The nombre field can't be null."}, max_length=255, verbose_name='Name')),
                ('detail', models.CharField(error_messages={'blank': "The detalle field can't be blank.", 'invalid': 'The detalle field is invalid.', 'max_length': 'The detalle field must be at most 255 characters.', 'null': "The detalle field can't be null."}, max_length=255, verbose_name='Detail')),
            ],
            options={
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Tax',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated')),
                ('name', models.CharField(error_messages={'blank': "The name field can't be blank.", 'invalid': 'The name field is invalid.', 'max_length': 'The name field must be at most 255 characters.', 'null': "The name field can't be null.", 'unique': 'Tax with this name already exists.'}, max_length=255, unique=True, verbose_name='Name')),
                ('percent', models.DecimalField(blank=True, decimal_places=2, error_messages={'invalid': 'The percent field is invalid.'}, max_digits=8, null=True, verbose_name='Percent')),
            ],
            options={
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated')),
                ('name', models.CharField(error_messages={'blank': "The name field can't be blank.", 'invalid': 'The name field is invalid.', 'max_length': 'The name field must be at most 255 characters.', 'null': "The name field can't be null.", 'unique': 'State with this name already exists.'}, max_length=255, unique=True, verbose_name='Name')),
                ('detail', models.CharField(error_messages={'blank': "The detalle field can't be blank.", 'invalid': 'The detalle field is invalid.', 'max_length': 'The detalle field must be at most 255 characters.', 'null': "The detalle field can't be null."}, max_length=255, verbose_name='Detail')),
                ('country', models.ForeignKey(blank=True, error_messages={'blank': "The country_id field can't be blank.", 'invalid': 'The country_id field is invalid.', 'null': "The country_id field can't be null."}, null=True, on_delete=django.db.models.deletion.PROTECT, to='common.country', verbose_name='Country')),
            ],
            options={
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Parish',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated')),
                ('name', models.CharField(error_messages={'blank': "The nombre field can't be blank.", 'invalid': 'The nombre field is invalid.', 'max_length': 'The nombre field must be at most 255 characters.', 'null': "The nombre field can't be null.", 'unique': 'Parish with this nombre already exists.'}, max_length=255, unique=True, verbose_name='Name')),
                ('detail', models.CharField(error_messages={'blank': "The detalle field can't be blank.", 'invalid': 'The detalle field is invalid.', 'max_length': 'The detalle field must be at most 255 characters.', 'null': "The detalle field can't be null."}, max_length=255, verbose_name='Detail')),
                ('municipality', models.ForeignKey(blank=True, error_messages={'blank': "The municipality_id field can't be blank.", 'invalid': 'The municipality_id field is invalid.', 'null': "The municipality_id field can't be null."}, null=True, on_delete=django.db.models.deletion.PROTECT, to='common.municipality', verbose_name='Municipality')),
            ],
            options={
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='municipality',
            name='state',
            field=models.ForeignKey(blank=True, error_messages={'blank': "The state_id field can't be blank.", 'invalid': 'The state_id field is invalid.', 'null': "The state_id field can't be null."}, null=True, on_delete=django.db.models.deletion.PROTECT, to='common.state', verbose_name='State'),
        ),
    ]
